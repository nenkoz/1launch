#!/bin/bash

# 🚀 Dutch Coin Arena - Complete Setup Script
# This script sets up everything needed to run the project locally

set -e  # Exit on any error

echo "🚀 Starting Dutch Coin Arena Setup..."
echo "=================================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

print_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

# Check if running on macOS or Linux
if [[ "$OSTYPE" == "darwin"* ]]; then
    OS="macOS"
elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
    OS="Linux"
else
    print_error "Unsupported operating system: $OSTYPE"
    exit 1
fi

print_info "Detected OS: $OS"

# 1. Check Node.js version
print_info "Checking Node.js version..."
if command -v node &> /dev/null; then
    NODE_VERSION=$(node --version)
    print_status "Node.js found: $NODE_VERSION"
    
    # Check if Node version is 18.x or higher
    NODE_MAJOR=$(echo $NODE_VERSION | cut -d'.' -f1 | cut -d'v' -f2)
    if [ "$NODE_MAJOR" -lt 18 ]; then
        print_warning "Node.js version should be 18 or higher. Current: $NODE_VERSION"
        print_info "Please update Node.js: https://nodejs.org/"
    fi
else
    print_error "Node.js not found. Please install Node.js 18+ from https://nodejs.org/"
    exit 1
fi

# 2. Check npm version
print_info "Checking npm version..."
if command -v npm &> /dev/null; then
    NPM_VERSION=$(npm --version)
    print_status "npm found: $NPM_VERSION"
else
    print_error "npm not found. Please install npm"
    exit 1
fi

# 3. Install project dependencies
print_info "Installing project dependencies..."
npm install
print_status "Dependencies installed successfully"

# 4. Install global dependencies if needed
print_info "Checking global dependencies..."

# Check if hardhat is available (will be installed locally)
if ! npx hardhat --version &> /dev/null; then
    print_info "Installing Hardhat locally..."
    npm install --save-dev hardhat
fi

# 5. Create environment file
print_info "Setting up environment file..."

# Create .env.local file with live configuration
cat > .env.local << 'EOF'
# Environment Configuration - Dutch Coin Arena
# Generated by setup.sh with live contract addresses

# Supabase Configuration
VITE_SUPABASE_URL=https://mhwkcmvhgbdkrhtkfnxb.supabase.co
VITE_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1od2tjbXZoZ2Jka3JodGtmbnhiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTI4NDEzNjQsImV4cCI6MjA2ODQxNzM2NH0.emY7lXDvCQE5h8CecaeUkOb3vfbdGzccB5NZsrMT7ww

# 1inch API Configuration  
VITE_ONE_INCH_API_KEY=nkhoswAuNTpu4DGJ2OmxTxI7x4dLRMMM
VITE_ONE_INCH_BASE_URL=https://api.1inch.dev

# Backend API
VITE_BACKEND_API_BASE_URL=http://127.0.0.1:4999

# Arbitrum Blockchain Configuration
VITE_CHAIN_ID=42161
VITE_USDC_ADDRESS=0xaf88d065e77c8cC2239327C5EDb3A432268e5831
VITE_ONE_INCH_ROUTER=0x1111111254EEB25477B68fb85Ed929f73A960582

# WalletConnect Project ID
VITE_WALLETCONNECT_PROJECT_ID=37a60faaa4b679d67e56d0309320ca90

# Deployment Configuration
PRIVATE_KEY=
ARBITRUM_RPC_URL=https://arb1.arbitrum.io/rpc

# Optional: For testnet
# VITE_CHAIN_ID=421614
# ARBITRUM_SEPOLIA_RPC_URL=https://sepolia-rollup.arbitrum.io/rpc

# Etherscan API Key for contract verification
ETHERSCAN_API_KEY=your_etherscan_api_key

# Optional
REPORT_GAS=true 
# Contract Addresses from deployment (Latest)
VITE_TOKEN_FACTORY_ADDRESS=0x17dc0102c32704a5cC42Eb3Ac3048fbA990fe55B
VITE_AUCTION_CONTROLLER_ADDRESS=0x8D058Fb25D7005beA57923141620D7FeF3F037a4

# Auction Resolver
AUCTION_RESOLVER_ADDRESS=0x... # Deployed resolver address
RESOLVER_PRIVATE_KEY=0x... # Private key of authorized filler

EOF

print_status "Environment file created: .env.local"

# 6. Compile smart contracts
print_info "Compiling smart contracts..."
npm run compile
print_status "Smart contracts compiled successfully"

# 7. Create required directories
print_info "Creating required directories..."
mkdir -p deployments
mkdir -p artifacts
mkdir -p cache
print_status "Directories created"

# 8. Set up git hooks (optional)
if [ -d ".git" ]; then
    print_info "Setting up git hooks..."
    # Add pre-commit hook to run linting
    mkdir -p .git/hooks
    cat > .git/hooks/pre-commit << 'EOF'
#!/bin/sh
npm run lint
EOF
    chmod +x .git/hooks/pre-commit
    print_status "Git hooks configured"
fi

# 9. Display setup completion and next steps
echo ""
echo "🎉 Setup completed successfully!"
echo "================================"
echo ""
print_info "NEXT STEPS:"
echo "1. 🔑 Add your wallet private key to .env.local:"
echo "   PRIVATE_KEY=your_actual_private_key_here"
echo ""
echo "2. ✅ API keys are already configured (Supabase, 1inch, WalletConnect)"
echo ""
echo "3. 🚀 Start the development server:"
echo "   npm run dev"
echo ""
echo "4. 🌐 Open your browser to: http://localhost:5173"
echo ""
print_info "LIVE CONTRACT ADDRESSES (Already configured):"
echo "   • TokenFactory: 0xA06506f8B579e175B1Ad7bbba697F05b63A13465"
echo "   • AuctionController: 0x9D8b23E40a29D89C47513eC9B488bE0529843A41"
echo "   • Network: Arbitrum Mainnet (Chain ID: 42161)"
echo ""
print_info "FEATURES READY:"
echo "   ✅ 1-minute minimum auction duration"
echo "   ✅ Complete token deployment + auction creation flow"
echo "   ✅ Real-time bidding with private counts"
echo "   ✅ 1inch integration for limit orders"
echo "   ✅ Supabase backend for auction data"
echo ""
print_warning "IMPORTANT:"
echo "   • Keep your PRIVATE_KEY secure and never commit it to git"
echo "   • The contracts are already deployed and working on Arbitrum mainnet"
echo "   • You need real ETH on Arbitrum to deploy new tokens"
echo ""
print_status "Ready to rock! 🚀" 